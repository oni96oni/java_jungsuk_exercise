/*
6-8
★1번 new생성자는 클래스의 이름과 동일하지 않잖아? x
new는 연산자이다! 
2번 생성자는 객체를 초기화해주기위한것이다 x
생성자가 객체를 생성할때 사용되기는 하지만, 객체를 초기화할 목적으로 사용되는 것이다. 객체를 생성하는것은 
new연산자이다.
3번  없는이유는 컴파일러가 기본생성자를 생성해주어서 생성자가하나도없을때 o
4번 생성자가 없는 클래스는 컴파일러가 자동으로 기본생성자를 추가한다 o
★5번 생성자도 오버로딩 가능하다. 아니 메서드만 오버로딩 가능 o
생성자도 오버로딩이 가능해서 하나의 클래스에 여러 개의 생성자를 정의할 수 있다.

2번 생성자는 객체를 생성하기 위한 것이다.
→ 생성자가 객체를 생성할 때 사용되기는 하지만, 객체를 초기화할 목적으로 사용되는
것이다. 객체를 생성하는 것은 new연산자이다.
5번 생성자는 오버로딩 할 수 없다.
→ 생성자도 오버로딩이 가능해서 하나의 클래스에 여러 개의 생성자를 정의할 수 있
다.

6-9
1번 객체 자신을 가리키는 참조변수 맞음 o
2번 클래스 내에서라면 어디서든 사용할 수 있음 o
3번 지역변수와 인스턴스 변수를 구별할 때 사용하는것은 static이다 x
4번 클래스 메서드 내에서는 사용할 수 있음 x 

2번 클래스멤버(static이 붙은 변수나 메서드)에는 사용할 수 없다.
this는 인스턴스 자신의 주소를 저장하고 있으며, 모든 인스턴스메서드에 숨겨진 채로 존재하는 지역변수이다.
그래서 인스턴스메서드 내에서만 사용할 수 있다.

6-10
1번 메서드의 이름 같아야함 o
2번 매개변수의 개수나 타입이 달라야 한다. 개수는 동일 타입은 달라야해 x
3번 리턴타입이 달라야한다. 같아야해 x 
4번 매개변수의 이름은 달라도 상관없음 x 

3번 리턴타입이 달라야 한다.
리턴타입은 오버로딩에 영향을 주지 못한다.
4번 매개변수의 이름이 달라야 한다.
리턴타입은 오버로딩에 영향을 주지 못한다

6-11
1번 매개변수의 이름과 갯수 동일해서 안됨
2번 매개변수의 타입  모두 다름 가능  o
3번 반환타입은 달라도 상관 없음 o
4번 매개변수마다의 타입 달라도 상관없음 o 

6-12
1번 멤버변수는 자동초기화되므로 값을 참조하는것 가능
2번 지역변수는 값이 자동초기화가 되지않으므로 사용하기전에 반드시 초기화 해야함 
3번 생성자보다 초기화블럭이 먼저 수행됩니다. x
4번 명시적 초기화를 제일 우선적으로 고려하는것 맞음
5번 클래스변수보다 인스턴스 변수가 먼저초기화? 둘이 동시에 되거나 클래스먼저일것같은데 x

3번 5번 클래스 변수는 클래스가 처음 메모리에 로딩될 때, 자동 초기화 되므로 인스턴스 변수보다 먼저 초기화 된다. 
그리고 생성자는 초기화 블럭이 수행된 다음에 수행된다.

6-13
인스턴스 변수의 초기화 순서가 올바른것은
기본값-명시적초기화-블럭-생성자
1번

6-14
1번 지역변수는 자동초기화 되지않으므로 별도의 초기화과정 필수 x
2번 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸 
3번 매서드의 매개변수로 선언된 변수도 지역변수이다 
4번 클래스 변수나 인스턴스 변수보다 메모리 부담이 적다. 덮어씌우니까 
5번 힙영역에 생성되며 가비지 컬렉터에 의해 소멸된다 x 가비지컬렉터가 아니라 덮어씌워서 없앰 

5번 힙영역에는 인스턴스가 생성되는 영역이며, 지역변수는 호출스택에 생성된다!

6-15
1번 메인메서드가 맨밑에있으니까 맞습니다.
2번 모두 종료된 상태가아니라 대기상태 x
3번 메인메서드위에 메서드2가 있으니 메인메서드가 메서드2를 호출한것이 맞다 
4번 프린트끝나면 메서드1수행 맞음
5번 맞음
6번 맞음 
*/